
Node + Http => Web
Node + Express => Rest API

Node in React => Bundle 
					Cached
					Merged into single file
					Copy required functions
					Compressed
					
React =>
	React with HTML
	React with Node
	React with Java/Asp.net/Python
	
BoilerPlate => Common Code, Initial Code
BoilerPlate Generator => create-react-app

create-react-app => script to generate a project
Installing create-react-app globally by using below command.
npm install -g create-react-app

MERN =>  npm install -g mern-cli
Angular => npm install -g @angular/cli
RN => npm install -g create-react-native-app


https://reactjs.org/

Generating a Project => 
	create-react-app projectName 
	in latest version of node use, below command.(not to worry, either 1 of these 2 will work. if one doesnt, try other )
	npx create-react-app projectName 

create-react-app portaldemo

Opening Project
	Visual Studio Code => https://code.visualstudio.com/
	Atom
	Nuclide

Project Structure
node_modules => Modules get installed into this folder
package.json
	Scripts
		start => Start of the project using WebPack
		build => to generate bundle which can be deployed directly
		test => running Tests
		eject => it will come out of react-scripts
registerServiceWorker => caching resources in the browser

Starting Point
public/index.html
src/index.js

Actual Starting Point 
src/App.js

ES5
	var React = require('react');
	module.exports = App;
ES6
	import React from 'react';
	export App; => import { App } from './app.js'
	export default App; => import App1 from './app.js'
	

	
Running Project
	npm run start

React-Scripts
	takes care of important modules like webpack, nodeman
	
	
React in 2014
	cd portaldemo
	npm init
	npm install react
	npm install react-dom
	create index.html with root id
	create js and have render logic
	add js to html
	create start.js file where it uses http to read index.html and listen in 3000 port
	
React before react-scripts
	create-react-app portaldemo
		react
		react-dom
		webpack
		nodeman
		babel
	start.js for reading html and opening port

React after react-scripts
	create-react-app portaldemo
		react
		react-dom
		react-scripts

Adding Module - 2 options
	1. npm install getNews
	2. copy getNews in dependency section of package.json and run npm install
	
npm run start
npm run build
npm run test
npm run eject

Project Structure
	containers => pages
	components => reusable components across multiple pages
	data => static data
	util => helper functions
	
npm - Modules
Commands
	add - npm install moduleName
	update - npm update moduleName
	delete - npm uninstall moduleName

1. Installing dependencies one by one
	npm install react
	npm install react-dom

2. Installing multiple dependencies with single command
	npm install react react-dom

Points to remember
1. It installs modules inside node_modules folder.
2. It installs submodules required for that module.
3. In each module, there should be package.json.
4. We will never checkin node_modules folder. So when we download a project from source control, we must run command npm install to install all dependencies.
5. Module can be added using npm install moduleName or add module manually to dependencies object of package.json and run npm install command.
6. save is attribute to be used to insert module into dependencies section of package.json
	npm install react --save
7. save-dev is attribute to be used to insert module into devDependencies section of package.json. These modules I need in development stage only.
	npm install jest --save-dev

Routing
	react-router-dom

npm install react-router-dom --save
yarn add react-router-dom

Routers
	BrowserRouter /r1 /r2 /r3
	HashRouter #r1 #r2 #r3 
	
react-router-dom is a react component where it uses javascript history object for Routing

history.push('/r2')

https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf

Stateful vs Stateless Component

Stateful => Tracking enabled for state level variables
			using ES6 class
			using this keyword

Stateless => No Tracking
			using functions
			Component will load faster than Stateful
			dont use this keyword


1. Use Stateful Components only if there is need of partial refresh on updating variables

Stateful
	class Header extends React.Component {
		render(){
			return <div>{this.props.title} Header</div>;
		}
	}

Stateless
	const Header = (props) => <div>{props.title} Header</div>

	const Header = ({ title }) => <div>{props.title} Header</div> 

	with default keyword
	export default ({ title }) => <div>{title} Header</div>;

Notes on Styles
	Dont use same tag or classnames across multiple css files. if used, those will be collided and overided

Adding Images
1. add images to public folder and use as html standard
	adv: 
		same syntax as html
		ability to configure in backend and get images dynamically
	dis: all files will be copied to bundle
2. add images inside images folder of src folder and import images in the beginining of the file
	adv:
		copies only used images(ie imported images)
	dis:
		fixed set of data and cant load dynamically
		syntax changes
		we must import in the beginining of the file
export default geolocated({
  positionOptions: {
    enableHighAccuracy: false,
  },
  userDecisionTimeout: 5000,
})(Demo);


function geolocated(options){
	var isGeolocationAvailable = true;
	return function(Component){
		return <Component {...options} isGeolocationAvailable />
	}
}

// Sample of ...
class Test extends React.Component {
	render() {
		const { name, age, city, state, gender } = this.props;
	}
}

class Test2 extends React.Component {
	render() {
		/*const { name, age, city, state } = this.props;
		return <Test name={name} age={age} city={city} />*/
		
		return <Test {...this.props} gender="M" age={30} />
	}
}

<Test2 name="Omesh" age={20} city="Hyderabad" state="Telangana" />

API
	Registration => username, password, city
	Login => username, password
	Students => retrieve 10 students
	UpdateStudent
	DeleteStudent
	AddStudent
	
	
Life Cycle
	constructor => 
		This is triggerd in the beginning when component is consumed.
		used for setting default values
	componentWillMount =>
		This is triggerd before render method ie when component is ready to render.
		used for subscriptions to channels, bluetooth connectivity
	render => 
		This is triggerd when rendering is started.
		used for actual view or rendering the view
	componentDidMount => 
		This is triggerd when rendering is finished.
		used for making backend calls to load actual data
	componentWillUnMount =>
		This is triggerd when component is going to end/kill
		used for desubscriptions
		
Promise
	
Asynchronous Process => Its a process which runs in background, parallel to the main process and Main process is not dependent on it.

Promise is used to handle asynchronous process.
Promise is an object having 2 outcomes. 1. success 2. failure
	if success, then block is executed else catch block is executed
Ex: connecting to bluetooth
		connectBluetooth()
		.then(function(response) {
			alert('Bluetooth is connected');
		})
		.catch(function(error){
			alert('Connection failed with reason' + error);
		});
	backend call to fetch data
		fetchData('xyz.com/getStudents')
			.then(response => 
				{ 
					var students = response.data;
					// add to table
				})
			.catch(error => alert('Retrieving students failed'))
	
	TakeHelp({
	name: 'XYZ',
	action: 'Collect Money',
	amount: 10k
}).then(function(response){}).catch(function(error){});

response = {
	status: 'Success',
	data: [ {}, {}, {}]
	total : 3
}

// multiple promises 
	if outcome of one promise is giving new promise, then one more then block is needed
foodOrder()
	.then(resonse => {
		alert(resonse.status); .... food is ready
		return collectFood();
	}
	.then(resonse => {
		alert(resonse.status); ... started delivery
		return deliverFood();
	}
	.then(response => {
		alert(resonse.status); ... item delivered
	}
	.catch(error => {
		alert(error);
	});
	
		
Pending things
	Google Authentication
	Custom Authentication and Authorization
	Backend Calls
	CRUD Operations
	How to choose Modules
	AutoComplete Google Map
	Promises
	Custom Routing
	Jquery
	ServerSide Pagination
	Material UI
	Dashboard samples from third party
	
	

	
	
	